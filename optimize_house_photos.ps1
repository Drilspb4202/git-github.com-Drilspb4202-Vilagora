# üè† –°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–º–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –í–∏–ª–ª–∞–≥–æ—Ä–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–æ—Ç–æ –¥–æ 800x600px –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏—Ö

param(
    [string]$InputFolder = ".\house_photos_original",
    [string]$OutputFolder = ".\public\images\accommodation",
    [int]$Width = 800,
    [int]$Height = 600,
    [int]$Quality = 85
)

Write-Host "üè† –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –§–û–¢–û–ì–†–ê–§–ò–ô –î–û–ú–ê –î–õ–Ø –í–ò–õ–õ–ê–ì–û–†–ê" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
if (!(Test-Path $InputFolder)) {
    Write-Host "‚ùå –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $InputFolder" -ForegroundColor Red
    Write-Host "üìÅ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'house_photos_original' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –≤—Å–µ —Ñ–æ—Ç–æ –¥–æ–º–∞" -ForegroundColor Yellow
    New-Item -ItemType Directory -Path $InputFolder -Force | Out-Null
    Write-Host "‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: $InputFolder" -ForegroundColor Green
    Write-Host "üìã –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–º–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞" -ForegroundColor Cyan
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit
}

if (!(Test-Path $OutputFolder)) {
    New-Item -ItemType Directory -Path $OutputFolder -Force | Out-Null
    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: $OutputFolder" -ForegroundColor Green
}

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
$imageExtensions = @("*.jpg", "*.jpeg", "*.png", "*.bmp", "*.tiff", "*.webp")
$images = @()
foreach ($ext in $imageExtensions) {
    $images += Get-ChildItem -Path $InputFolder -Filter $ext -File
}

if ($images.Count -eq 0) {
    Write-Host "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: $InputFolder" -ForegroundColor Red
    Write-Host "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, BMP, TIFF, WEBP" -ForegroundColor Yellow
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit
}

Write-Host "üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $($images.Count)" -ForegroundColor Cyan
Write-Host "üìê –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: ${Width}x${Height}px" -ForegroundColor Cyan
Write-Host "üéØ –ö–∞—á–µ—Å—Ç–≤–æ: $Quality%" -ForegroundColor Cyan
Write-Host ""

# –ó–∞–≥—Ä—É–∂–∞–µ–º .NET —Å–±–æ—Ä–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.Drawing.Imaging

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function Resize-Image {
    param(
        [string]$InputPath,
        [string]$OutputPath,
        [int]$Width,
        [int]$Height,
        [int]$Quality
    )
    
    try {
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        $originalImage = [System.Drawing.Image]::FromFile($InputPath)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        $sourceWidth = $originalImage.Width
        $sourceHeight = $originalImage.Height
        
        $sourceRatio = $sourceWidth / $sourceHeight
        $targetRatio = $Width / $Height
        
        if ($sourceRatio -gt $targetRatio) {
            # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            $cropWidth = [int]($sourceHeight * $targetRatio)
            $cropHeight = $sourceHeight
            $cropX = [int](($sourceWidth - $cropWidth) / 2)
            $cropY = 0
        } else {
            # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            $cropWidth = $sourceWidth
            $cropHeight = [int]($sourceWidth / $targetRatio)
            $cropX = 0
            $cropY = [int](($sourceHeight - $cropHeight) / 2)
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        $newImage = New-Object System.Drawing.Bitmap($Width, $Height)
        $graphics = [System.Drawing.Graphics]::FromImage($newImage)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        $graphics.InterpolationMode = [System.Drawing.Drawing2D.InterpolationMode]::HighQualityBicubic
        $graphics.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality
        $graphics.PixelOffsetMode = [System.Drawing.Drawing2D.PixelOffsetMode]::HighQuality
        $graphics.CompositingQuality = [System.Drawing.Drawing2D.CompositingQuality]::HighQuality
        
        # –û–±—Ä–µ–∑–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        $srcRect = New-Object System.Drawing.Rectangle($cropX, $cropY, $cropWidth, $cropHeight)
        $destRect = New-Object System.Drawing.Rectangle(0, 0, $Width, $Height)
        $graphics.DrawImage($originalImage, $destRect, $srcRect, [System.Drawing.GraphicsUnit]::Pixel)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JPG
        $jpegCodec = [System.Drawing.Imaging.ImageCodecInfo]::GetImageEncoders() | Where-Object { $_.MimeType -eq "image/jpeg" }
        $encoderParams = New-Object System.Drawing.Imaging.EncoderParameters(1)
        $encoderParams.Param[0] = New-Object System.Drawing.Imaging.EncoderParameter([System.Drawing.Imaging.Encoder]::Quality, $Quality)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        $newImage.Save($OutputPath, $jpegCodec, $encoderParams)
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        $graphics.Dispose()
        $newImage.Dispose()
        $originalImage.Dispose()
        
        return $true
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ $InputPath : $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
$processed = 0
$errors = 0

foreach ($image in $images) {
    $inputPath = $image.FullName
    $baseName = [System.IO.Path]::GetFileNameWithoutExtension($image.Name)
    $outputPath = Join-Path $OutputFolder "$baseName.jpg"
    
    Write-Host "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: $($image.Name)" -ForegroundColor Yellow
    
    if (Resize-Image -InputPath $inputPath -OutputPath $outputPath -Width $Width -Height $Height -Quality $Quality) {
        $processed++
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        $fileInfo = Get-Item $outputPath
        $fileSizeKB = [math]::Round($fileInfo.Length / 1KB, 1)
        Write-Host "   ‚úÖ –ì–æ—Ç–æ–≤–æ: $($fileInfo.Name) ($fileSizeKB –ö–ë)" -ForegroundColor Green
    } else {
        $errors++
    }
}

Write-Host ""
Write-Host "üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green
Write-Host "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: $processed" -ForegroundColor Green
Write-Host "‚ùå –û—à–∏–±–æ–∫: $errors" -ForegroundColor Red
Write-Host "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $OutputFolder" -ForegroundColor Cyan

if ($processed -gt 0) {
    Write-Host ""
    Write-Host "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:" -ForegroundColor Yellow
    Write-Host "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ: $OutputFolder" -ForegroundColor White
    Write-Host "2. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ —Å—Ö–µ–º–µ: house-1.jpg, house-2.jpg, house-3.jpg..." -ForegroundColor White
    Write-Host "3. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ —Å–∞–π—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö 30 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π" -ForegroundColor White
}

Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
