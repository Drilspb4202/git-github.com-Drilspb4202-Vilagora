"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { ArrowRight, ArrowLeft, Sparkles, Target, Calendar } from "lucide-react"

interface QuizQuestion {
  id: string
  question: string
  options: {
    id: string
    text: string
    icon: string
    weight: {
      minimal: number
      medium: number
      comfort: number
      maximum: number
    }
  }[]
}

interface QuizResult {
  packageName: string
  score: number
  reasons: string[]
  activities: string[]
  dietaryNeeds: string[]
}

const quizQuestions: QuizQuestion[] = [
  {
    id: "experience",
    question: "–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Å —Ä–µ—Ç—Ä–∏—Ç–∞–º–∏?",
    options: [
      {
        id: "first-time",
        text: "–ü–µ—Ä–≤—ã–π —Ä–∞–∑",
        icon: "üå±",
        weight: { minimal: 3, medium: 2, comfort: 1, maximum: 0 },
      },
      {
        id: "some-experience",
        text: "–ë—ã–ª –Ω–∞ 1-2 —Ä–µ—Ç—Ä–∏—Ç–∞—Ö",
        icon: "üåø",
        weight: { minimal: 1, medium: 3, comfort: 2, maximum: 1 },
      },
      {
        id: "experienced",
        text: "–†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É—é",
        icon: "üå≥",
        weight: { minimal: 0, medium: 1, comfort: 2, maximum: 3 },
      },
    ],
  },
  {
    id: "duration",
    question: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã –ø–æ—Å–≤—è—Ç–∏—Ç—å —Ä–µ—Ç—Ä–∏—Ç—É?",
    options: [
      {
        id: "short",
        text: "2-3 –¥–Ω—è (–≤—ã—Ö–æ–¥–Ω—ã–µ)",
        icon: "‚è∞",
        weight: { minimal: 3, medium: 1, comfort: 0, maximum: 0 },
      },
      {
        id: "medium",
        text: "4-6 –¥–Ω–µ–π",
        icon: "üìÖ",
        weight: { minimal: 1, medium: 3, comfort: 2, maximum: 1 },
      },
      {
        id: "long",
        text: "–ù–µ–¥–µ–ª—è –∏ –±–æ–ª—å—à–µ",
        icon: "üóìÔ∏è",
        weight: { minimal: 0, medium: 1, comfort: 3, maximum: 3 },
      },
    ],
  },
  {
    id: "activities",
    question: "–ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç?",
    options: [
      {
        id: "relaxation",
        text: "–û—Ç–¥—ã—Ö –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ",
        icon: "üßò",
        weight: { minimal: 2, medium: 3, comfort: 2, maximum: 1 },
      },
      {
        id: "nature",
        text: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
        icon: "ü•æ",
        weight: { minimal: 1, medium: 2, comfort: 3, maximum: 2 },
      },
      {
        id: "luxury",
        text: "–ö–æ–º—Ñ–æ—Ä—Ç –∏ —Å–ø–∞-–ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        icon: "‚ú®",
        weight: { minimal: 0, medium: 1, comfort: 2, maximum: 3 },
      },
    ],
  },
  {
    id: "budget",
    question: "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
    options: [
      {
        id: "budget",
        text: "–î–æ 50 000 ‚ÇΩ",
        icon: "üí∞",
        weight: { minimal: 3, medium: 2, comfort: 0, maximum: 0 },
      },
      {
        id: "medium-budget",
        text: "50-80 000 ‚ÇΩ",
        icon: "üí≥",
        weight: { minimal: 1, medium: 3, comfort: 3, maximum: 1 },
      },
      {
        id: "premium",
        text: "80 000+ ‚ÇΩ",
        icon: "üíé",
        weight: { minimal: 0, medium: 1, comfort: 2, maximum: 3 },
      },
    ],
  },
  {
    id: "group-size",
    question: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã?",
    options: [
      {
        id: "intimate",
        text: "–û—á–µ–Ω—å –∫–∞–º–µ—Ä–Ω–æ (2-3 —á–µ–ª–æ–≤–µ–∫–∞)",
        icon: "üë•",
        weight: { minimal: 2, medium: 3, comfort: 2, maximum: 3 },
      },
      {
        id: "small",
        text: "–ù–µ–±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞ (4-5 —á–µ–ª–æ–≤–µ–∫)",
        icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
        weight: { minimal: 3, medium: 2, comfort: 3, maximum: 2 },
      },
    ],
  },
]

export function PackageQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<string, string>>({})
  const [showResult, setShowResult] = useState(false)
  const [result, setResult] = useState<QuizResult | null>(null)

  const handleAnswer = (questionId: string, answerId: string) => {
    setAnswers((prev) => ({ ...prev, [questionId]: answerId }))
  }

  const nextQuestion = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion((prev) => prev + 1)
    } else {
      calculateResult()
    }
  }

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion((prev) => prev - 1)
    }
  }

  const calculateResult = () => {
    const scores = {
      minimal: 0,
      medium: 0,
      comfort: 0,
      maximum: 0,
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    Object.entries(answers).forEach(([questionId, answerId]) => {
      const question = quizQuestions.find((q) => q.id === questionId)
      const option = question?.options.find((o) => o.id === answerId)

      if (option) {
        scores.minimal += option.weight.minimal
        scores.medium += option.weight.medium
        scores.comfort += option.weight.comfort
        scores.maximum += option.weight.maximum
      }
    })

    // –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
    const maxScore = Math.max(...Object.values(scores))
    const recommendedPackage = Object.entries(scores).find(([_, score]) => score === maxScore)?.[0]

    const packageNames = {
      minimal: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π",
      medium: "–°—Ä–µ–¥–Ω–∏–π",
      comfort: "–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π",
      maximum: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π",
    }

    const packageReasons = {
      minimal: [
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Ä–µ—Ç—Ä–∏—Ç–∞–º–∏",
        "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        "–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞",
      ],
      medium: [
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –æ—Ç–¥—ã—Ö–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
        "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏",
        "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞",
      ],
      comfort: [
        "–ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø—Ä–∏—Ä–æ–¥—É –∏ —Å–µ–±—è",
        "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä",
        "–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞",
      ],
      maximum: [
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥",
        "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      ],
    }

    const activities = {
      minimal: ["–ë–∞–Ω—è", "–ü—Ä–æ–≥—É–ª–∫–∏ –ø–æ –ª–µ—Å—É", "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ —É –æ–∑–µ—Ä–∞"],
      medium: ["–≠–∫–æ—Ç—É—Ä—ã", "–ê—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏—è", "–†—ã–±–∞–ª–∫–∞", "–°–±–æ—Ä —è–≥–æ–¥"],
      comfort: ["–°–ø–∞-–ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"],
      maximum: ["–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—É—á", "VIP-–ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏"],
    }

    setResult({
      packageName: packageNames[recommendedPackage as keyof typeof packageNames] || "–°—Ä–µ–¥–Ω–∏–π",
      score: maxScore,
      reasons: packageReasons[recommendedPackage as keyof typeof packageReasons] || packageReasons.medium,
      activities: activities[recommendedPackage as keyof typeof activities] || activities.medium,
      dietaryNeeds: [], // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    })

    setShowResult(true)
  }

  const resetQuiz = () => {
    setCurrentQuestion(0)
    setAnswers({})
    setShowResult(false)
    setResult(null)
  }

  const progress = ((currentQuestion + 1) / quizQuestions.length) * 100

  if (showResult && result) {
    return (
      <Card className="bg-forest-900/30 backdrop-blur-sm border-forest-700/30 shadow-2xl">
        <CardHeader className="text-center">
          <div className="flex items-center justify-center mb-4">
            <div className="bg-gradient-to-r from-forest-500 to-amber-500 w-16 h-16 rounded-2xl flex items-center justify-center shadow-xl">
              <Sparkles className="h-8 w-8 text-white" />
            </div>
          </div>
          <CardTitle className="text-2xl sm:text-3xl bg-gradient-to-r from-forest-400 to-amber-400 bg-clip-text text-transparent">
            –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
          </CardTitle>
          <CardDescription className="text-stone-300 text-lg">
            –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="text-center">
            <Badge className="text-2xl py-3 px-6 bg-gradient-to-r from-forest-600 to-forest-700 text-white mb-4">
              {result.packageName}
            </Badge>
          </div>

          <div>
            <h4 className="font-semibold text-forest-400 mb-3 flex items-center gap-2">
              <Target className="h-5 w-5" />
              –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –≤–∞—Å:
            </h4>
            <ul className="space-y-2">
              {result.reasons.map((reason, index) => (
                <li key={index} className="flex items-start gap-2 text-stone-300">
                  <span className="text-forest-400 mt-1">‚Ä¢</span>
                  {reason}
                </li>
              ))}
            </ul>
          </div>

          <div>
            <h4 className="font-semibold text-forest-400 mb-3 flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
            </h4>
            <div className="flex flex-wrap gap-2">
              {result.activities.map((activity, index) => (
                <Badge key={index} variant="outline" className="border-forest-600/30 text-forest-300">
                  {activity}
                </Badge>
              ))}
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <Button
              onClick={resetQuiz}
              variant="outline"
              className="flex-1 border-forest-600/50 text-forest-300 hover:bg-forest-800/30"
            >
              –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
            </Button>
            <Button
              className="flex-1 bg-gradient-to-r from-forest-600 to-forest-700 hover:from-forest-500 hover:to-forest-600 text-white"
              onClick={() => {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º
                console.log("Booking package:", result.packageName)
              }}
            >
              –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  const question = quizQuestions[currentQuestion]
  const selectedAnswer = answers[question.id]

  return (
    <Card className="bg-forest-900/30 backdrop-blur-sm border-forest-700/30 shadow-2xl">
      <CardHeader>
        <div className="flex items-center justify-between mb-4">
          <Badge variant="outline" className="border-forest-600/30 text-forest-400">
            –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {quizQuestions.length}
          </Badge>
          <div className="text-sm text-stone-400">{Math.round(progress)}%</div>
        </div>
        <Progress value={progress} className="mb-4" />
        <CardTitle className="text-xl sm:text-2xl text-stone-100">{question.question}</CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        <div className="grid gap-3">
          {question.options.map((option) => (
            <button
              key={option.id}
              onClick={() => handleAnswer(question.id, option.id)}
              className={`p-4 rounded-xl border-2 transition-all duration-300 text-left hover:scale-105 ${
                selectedAnswer === option.id
                  ? "border-forest-500 bg-forest-800/30 shadow-lg"
                  : "border-forest-700/30 bg-forest-900/20 hover:border-forest-600/50 hover:bg-forest-800/20"
              }`}
            >
              <div className="flex items-center gap-3">
                <span className="text-2xl">{option.icon}</span>
                <span className="text-stone-200 font-medium">{option.text}</span>
              </div>
            </button>
          ))}
        </div>

        <div className="flex justify-between pt-4">
          <Button
            onClick={prevQuestion}
            disabled={currentQuestion === 0}
            variant="outline"
            className="border-forest-600/50 text-forest-300 hover:bg-forest-800/30 disabled:opacity-50"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            –ù–∞–∑–∞–¥
          </Button>

          <Button
            onClick={nextQuestion}
            disabled={!selectedAnswer}
            className="bg-gradient-to-r from-forest-600 to-forest-700 hover:from-forest-500 hover:to-forest-600 text-white disabled:opacity-50"
          >
            {currentQuestion === quizQuestions.length - 1 ? "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç" : "–î–∞–ª–µ–µ"}
            <ArrowRight className="h-4 w-4 ml-2" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
