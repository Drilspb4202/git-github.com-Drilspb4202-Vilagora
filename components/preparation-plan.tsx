"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Checkbox } from "@/components/ui/checkbox"
import { Calendar, CheckCircle, Clock, Heart, Backpack, Book, Smartphone, Download, Share2 } from "lucide-react"

interface PreparationTask {
  id: string
  title: string
  description: string
  category: "physical" | "mental" | "practical" | "spiritual"
  timeframe: string
  difficulty: "easy" | "medium" | "hard"
  completed: boolean
}

interface PreparationWeek {
  week: number
  title: string
  focus: string
  tasks: PreparationTask[]
}

const preparationPlan: PreparationWeek[] = [
  {
    week: 4,
    title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é",
    focus: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    tasks: [
      {
        id: "booking",
        title: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
        description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏",
        category: "practical",
        timeframe: "–ó–∞ 4 –Ω–µ–¥–µ–ª–∏",
        difficulty: "easy",
        completed: false,
      },
      {
        id: "transport",
        title: "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        description: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ",
        category: "practical",
        timeframe: "–ó–∞ 4 –Ω–µ–¥–µ–ª–∏",
        difficulty: "easy",
        completed: false,
      },
      {
        id: "gear-list",
        title: "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π",
        description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–µ—â–µ–π –¥–ª—è —Ä–µ—Ç—Ä–∏—Ç–∞",
        category: "practical",
        timeframe: "–ó–∞ 4 –Ω–µ–¥–µ–ª–∏",
        difficulty: "easy",
        completed: false,
      },
    ],
  },
  {
    week: 3,
    title: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
    focus: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
    tasks: [
      {
        id: "walking",
        title: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏",
        description: "30-45 –º–∏–Ω—É—Ç –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        category: "physical",
        timeframe: "–ó–∞ 3 –Ω–µ–¥–µ–ª–∏",
        difficulty: "easy",
        completed: false,
      },
      {
        id: "stretching",
        title: "–†–∞—Å—Ç—è–∂–∫–∞ –∏ –π–æ–≥–∞",
        description: "15-20 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∞—Å–∞–Ω –π–æ–≥–∏",
        category: "physical",
        timeframe: "–ó–∞ 3 –Ω–µ–¥–µ–ª–∏",
        difficulty: "medium",
        completed: false,
      },
      {
        id: "sleep-schedule",
        title: "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–Ω",
        description: "–õ–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å –¥–æ 23:00, –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –≤ 7:00",
        category: "physical",
        timeframe: "–ó–∞ 3 –Ω–µ–¥–µ–ª–∏",
        difficulty: "medium",
        completed: false,
      },
    ],
  },
  {
    week: 2,
    title: "–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
    focus: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–¥—ã—Ö",
    tasks: [
      {
        id: "meditation",
        title: "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
        description: "10-15 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫",
        category: "mental",
        timeframe: "–ó–∞ 2 –Ω–µ–¥–µ–ª–∏",
        difficulty: "medium",
        completed: false,
      },
      {
        id: "journaling",
        title: "–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞",
        description: "–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –º—ã—Å–ª–∏, –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Ü–µ–ª–∏ –æ—Ç —Ä–µ—Ç—Ä–∏—Ç–∞",
        category: "mental",
        timeframe: "–ó–∞ 2 –Ω–µ–¥–µ–ª–∏",
        difficulty: "easy",
        completed: false,
      },
      {
        id: "digital-detox",
        title: "–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å",
        description: "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—Ä–µ–º—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö",
        category: "mental",
        timeframe: "–ó–∞ 2 –Ω–µ–¥–µ–ª–∏",
        difficulty: "hard",
        completed: false,
      },
    ],
  },
  {
    week: 1,
    title: "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
    focus: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
    tasks: [
      {
        id: "packing",
        title: "–°–æ–±—Ä–∞—Ç—å –≤–µ—â–∏",
        description: "–£–ø–∞–∫–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É",
        category: "practical",
        timeframe: "–ó–∞ 1 –Ω–µ–¥–µ–ª—é",
        difficulty: "easy",
        completed: false,
      },
      {
        id: "intentions",
        title: "–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è",
        description: "–ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ä–µ—Ç—Ä–∏—Ç–∞",
        category: "spiritual",
        timeframe: "–ó–∞ 1 –Ω–µ–¥–µ–ª—é",
        difficulty: "medium",
        completed: false,
      },
      {
        id: "contacts",
        title: "–£–≤–µ–¥–æ–º–∏—Ç—å –±–ª–∏–∑–∫–∏—Ö",
        description: "–°–æ–æ–±—â–∏—Ç—å —Å–µ–º—å–µ –∏ –¥—Ä—É–∑—å—è–º –æ –ø–ª–∞–Ω–∞—Ö –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö",
        category: "practical",
        timeframe: "–ó–∞ 1 –Ω–µ–¥–µ–ª—é",
        difficulty: "easy",
        completed: false,
      },
    ],
  },
]

const categoryIcons = {
  physical: <Heart className="h-4 w-4" />,
  mental: <Book className="h-4 w-4" />,
  practical: <Backpack className="h-4 w-4" />,
  spiritual: <Calendar className="h-4 w-4" />,
}

const categoryColors = {
  physical: "from-red-500 to-red-600",
  mental: "from-blue-500 to-blue-600",
  practical: "from-green-500 to-green-600",
  spiritual: "from-purple-500 to-purple-600",
}

const difficultyColors = {
  easy: "text-green-400",
  medium: "text-yellow-400",
  hard: "text-red-400",
}

export function PreparationPlan() {
  const [tasks, setTasks] = useState<PreparationTask[]>(preparationPlan.flatMap((week) => week.tasks))
  const [selectedWeek, setSelectedWeek] = useState<number | null>(null)

  const toggleTask = (taskId: string) => {
    setTasks((prev) => prev.map((task) => (task.id === taskId ? { ...task, completed: !task.completed } : task)))
  }

  const completedTasks = tasks.filter((task) => task.completed).length
  const totalTasks = tasks.length
  const progress = (completedTasks / totalTasks) * 100

  const exportPlan = () => {
    const planText = preparationPlan
      .map(
        (week) =>
          `${week.title}\n${week.focus}\n\n${week.tasks
            .map((task) => `‚ñ° ${task.title}\n  ${task.description}\n`)
            .join("\n")}\n`,
      )
      .join("\n")

    const blob = new Blob([planText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "retreat-preparation-plan.txt"
    a.click()
  }

  return (
    <div className="space-y-6">
      <Card className="bg-forest-900/30 backdrop-blur-sm border-forest-700/30 shadow-2xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-gradient-to-r from-forest-500 to-amber-500 w-12 h-12 rounded-xl flex items-center justify-center">
                <Calendar className="h-6 w-6 text-white" />
              </div>
              <div>
                <CardTitle className="text-2xl text-stone-100">–ü–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ—Ç—Ä–∏—Ç—É</CardTitle>
                <p className="text-stone-400">–ü–æ—à–∞–≥–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞ 4 –Ω–µ–¥–µ–ª–∏</p>
              </div>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={exportPlan}
                className="border-forest-600/50 text-forest-300 hover:bg-forest-800/30"
              >
                <Download className="h-4 w-4 mr-2" />
                –°–∫–∞—á–∞—Ç—å
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="border-forest-600/50 text-forest-300 hover:bg-forest-800/30"
              >
                <Share2 className="h-4 w-4 mr-2" />
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </Button>
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-stone-300">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
              <span className="text-forest-400 font-semibold">
                {completedTasks} –∏–∑ {totalTasks} –∑–∞–¥–∞—á
              </span>
            </div>
            <Progress value={progress} className="mb-4" />
            <div className="flex gap-2 text-sm text-stone-400">
              <span>üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {Math.round(progress)}%</span>
              {progress >= 75 && <span>üåü –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞!</span>}
              {progress >= 50 && progress < 75 && <span>üëç –•–æ—Ä–æ—à–æ –∏–¥–µ—Ç–µ!</span>}
              {progress < 50 && <span>üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!</span>}
            </div>
          </div>

          <div className="grid gap-4">
            {preparationPlan.map((week) => {
              const weekTasks = tasks.filter((task) => week.tasks.some((weekTask) => weekTask.id === task.id))
              const weekCompleted = weekTasks.filter((task) => task.completed).length
              const weekProgress = (weekCompleted / weekTasks.length) * 100

              return (
                <Card
                  key={week.week}
                  className={`bg-forest-800/20 border-forest-600/30 cursor-pointer transition-all duration-300 hover:bg-forest-700/30 ${
                    selectedWeek === week.week ? "ring-2 ring-forest-500" : ""
                  }`}
                  onClick={() => setSelectedWeek(selectedWeek === week.week ? null : week.week)}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-lg text-stone-100 flex items-center gap-2">
                          <Clock className="h-5 w-5 text-forest-400" />
                          {week.title}
                        </CardTitle>
                        <p className="text-stone-400 text-sm mt-1">{week.focus}</p>
                      </div>
                      <div className="text-right">
                        <Badge
                          variant="outline"
                          className={`border-forest-600/30 ${
                            weekProgress === 100 ? "text-green-400" : "text-forest-400"
                          }`}
                        >
                          {weekCompleted}/{weekTasks.length}
                        </Badge>
                        {weekProgress === 100 && <CheckCircle className="h-5 w-5 text-green-400 mt-1 ml-auto" />}
                      </div>
                    </div>
                    <Progress value={weekProgress} className="mt-2" />
                  </CardHeader>

                  {selectedWeek === week.week && (
                    <CardContent className="pt-0">
                      <div className="space-y-3">
                        {week.tasks.map((weekTask) => {
                          const task = tasks.find((t) => t.id === weekTask.id)!
                          return (
                            <div
                              key={task.id}
                              className={`flex items-start gap-3 p-3 rounded-lg border transition-all duration-200 ${
                                task.completed
                                  ? "bg-forest-700/20 border-forest-600/30"
                                  : "bg-forest-800/20 border-forest-700/30 hover:bg-forest-700/30"
                              }`}
                            >
                              <Checkbox
                                checked={task.completed}
                                onCheckedChange={() => toggleTask(task.id)}
                                className="mt-1"
                              />
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <div
                                    className={`bg-gradient-to-r ${categoryColors[task.category]} w-6 h-6 rounded-lg flex items-center justify-center`}
                                  >
                                    <div className="text-white text-xs">{categoryIcons[task.category]}</div>
                                  </div>
                                  <h4
                                    className={`font-medium ${
                                      task.completed ? "text-stone-400 line-through" : "text-stone-200"
                                    }`}
                                  >
                                    {task.title}
                                  </h4>
                                  <Badge
                                    variant="outline"
                                    className={`text-xs border-forest-600/30 ${difficultyColors[task.difficulty]}`}
                                  >
                                    {task.difficulty}
                                  </Badge>
                                </div>
                                <p className={`text-sm ${task.completed ? "text-stone-500" : "text-stone-400"}`}>
                                  {task.description}
                                </p>
                                <p className="text-xs text-forest-400 mt-1">{task.timeframe}</p>
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    </CardContent>
                  )}
                </Card>
              )
            })}
          </div>

          <div className="bg-forest-800/20 rounded-lg p-4 border border-forest-600/30">
            <h4 className="font-semibold text-forest-400 mb-2 flex items-center gap-2">
              <Smartphone className="h-4 w-4" />
              –ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:
            </h4>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 text-sm">
              <Badge variant="outline" className="border-forest-600/30 text-forest-300 justify-center">
                Headspace
              </Badge>
              <Badge variant="outline" className="border-forest-600/30 text-forest-300 justify-center">
                Calm
              </Badge>
              <Badge variant="outline" className="border-forest-600/30 text-forest-300 justify-center">
                Forest
              </Badge>
              <Badge variant="outline" className="border-forest-600/30 text-forest-300 justify-center">
                Sleep Cycle
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
